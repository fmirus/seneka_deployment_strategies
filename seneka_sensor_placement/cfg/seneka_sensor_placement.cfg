#!/usr/bin/env python
PACKAGE = "seneka_sensor_placement"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# general configuration
gen.add("number_of_sensors", int_t, 0, "Number of sensors", 3, 1, 20)

# sensor configuration
gen.add("max_sensor_range", double_t, 0, "Maximum sensor range [m]", 15.0, 0.5, 100.0)
gen.add("open_angle_1", double_t, 0, "Lateral opening angle of the sensors [rad]", 1.5708, 0.0, 3.1415)
gen.add("open_angle_2", double_t, 0, "Vertical opening angle of the sensors [rad]", 1.5708, 0.0, 3.1415)
gen.add("max_linear_sensor_velocity", double_t, 0, "Maximum linear velocity of sensors for update step [m/step]", 1.0, 0.0, 10.0)
gen.add("max_angular_sensor_velocity", double_t, 0, "Maximum angular velocity of sensors for update step [rad/step]", 0.5236, 0.0, 3.1415)

# PSO configuration
gen.add("number_of_particles", int_t, 0, "Number of particles for PSO and Greedy/PSO", 20, 1, 100)
gen.add("max_num_iterations", int_t, 0, "Maximum number of iterations for PSO", 400, 1, 10000)
gen.add("min_coverage_to_stop", double_t, 0, "Threshold for stopping PSO [%]", 0.95, 0.0, 1.0)
gen.add("c1", double_t, 0, "PSO optimization parameter", 0.729, 0.0, 10.0)
gen.add("c2", double_t, 0, "PSO optimization parameter", 1.49445, 0.0, 10.0)
gen.add("c3", double_t, 0, "PSO optimization parameter", 1.49445, 0.0, 10.0)

# Greedy/PSO configuration
gen.add("max_num_iterations_per_sensor", int_t, 0, "Maximum number of iterations for Greedy/PSO", 30, 1, 1000)
gen.add("min_coverage_to_stop_per_sensor", double_t, 0, "Threshold for stopping Greedy/PSO [%]", 0.08, 0.0, 1.0)

# Greedy Configuration
gen.add("slice_open_angle_1", double_t, 0, "Lateral angle for slice for faster coverage computation [rad]", 1.5708, 0.0, 3.1415)
gen.add("slice_open_angle_2", double_t, 0, "Vertical for slice for faster coverage computation [rad]", 0.0, 0.0, 3.1415)
gen.add("GS_target_offset", double_t, 0, "Offset of greedy search targets [m]", 5.0, 0.0, 20.0)

exit(gen.generate(PACKAGE, "seneka_sensor_placement", "seneka_sensor_placement"))